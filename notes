Minitalk:

The purpose of this project is to code a small data change program using UNIX signals.

• Name your executable files client and server.
• You have to turn in a Makefile which will compile your source files. It must not
relink.
• You can definitely use your libft.
• You have to handle errors thoroughly. In no way your program should quit unexpectedly (segmentation fault, bus error, double free, and so forth).
• Your program mustn’t have memory leaks.
• You can have one global variable per program (one for the client and one for
the server), but you will have to justify their use.
• In order to complete the mandatory part, you are allowed to use the following functions:
  ◦ write
  ◦ ft_printf and any equivalent YOU coded ◦ signal
  ◦ sigemptyset
  ◦ sigaddset
  ◦ sigaction
  ◦ kill
  ◦ getpid
  ◦ malloc
  ◦ free
  ◦ pause
  ◦ sleep
  ◦ usleep
  ◦ exit


Mandatory Part:

1. You must create a communication program in the form of a client and a server.
    • The server must be started first. After its launch, it has to print its PID.
    • The client takes two parameters: 
        ◦ The server PID.
        ◦ The string to send.

2. The client must send the string passed as a parameter to the server.

3. Once the string has been received, the server must print it.
    • The server has to display the string pretty quickly. Quickly means that if you think it takes too long, then it is probably too long.
    • Your server should be able to receive strings from several clients in a row without needing to restart.
    • The communication between your client and your server has to be done only using UNIX signals.
    • You can only use these two signals: SIGUSR1 and SIGUSR2.
         1 second for displaying 100 characters is way too much!

Note: 
Linux system does NOT queue signals when you already have pending signals of this type!  Bonus time?


Bonus Part:

• The server acknowledges every message received by sending back a signal to the client.
• Unicode characters support!



1. What are UNIX signals?

1.1 Only SIGUSR1 and SIGUSR2 signals are permitted for use.

2. What are these functions?

  ◦ sigemptyset
  ◦ sigaddset
  ◦ sigaction
  ◦ kill
  ◦ getpid
  ◦ pause
  ◦ sleep
  ◦ usleep
  ◦ exit

3. What does this mean, “create a communication program in the form of a client and a server”?

3.1 The server, after it’s launch, has to print its PID. What is PID?

4. How do we get the client to send the string input to the server?

5. The server, print the string received from the client, how?

5.1 We need it to print the string quickly.

5.2 The server needs to receive strings from several clients in a row without restarting.

6. What does this mean, “Linux system does NOT queue signals when you already have pending signals of this type”?

7. Bonus: What does this mean, “The server acknowledges every message received by sending back a signal to the client”?

7.1 What does “Unicode characters support” mean for our bonus part?


Tree:

Minitalk/
	Makefile/
	libft/?
	ft_printf/?

	client.exe
	server.exe


